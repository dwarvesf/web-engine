// Script to generate the themes config file for the app
// Scans packages/themes/* for theme packages and generates a TypeScript config
// Supports auto-select theme and auto-imports generated components to theme adapter
import packageJson from '../package.json';
import siteConfigJson from '../src/generated/site-config.json';
import { promises as fs } from 'fs';
import path from 'path';
import { THEMES_DIR, THEMES_IMPORT_FILE } from './paths';

const appImportedPackages = packageJson.dependencies || {};
const appDevImportedPackages = packageJson.devDependencies || {};

const importedPackages = Object.keys({
  ...appImportedPackages,
  ...appDevImportedPackages,
});

// Define the theme names as constants for better maintainability
enum ThemeName {
  Default = 'default',
}
// Map of theme names to their package names
// This allows for easy extension if more themes are added in the future
const ThemePackagesMapping = new Map<string, string>([
  [ThemeName.Default, '@wse-themes/default'],
]);

function getThemePackageNameByThemeName(themeName: string) {
  return (
    ThemePackagesMapping.get(themeName) ||
    ThemePackagesMapping.get(ThemeName.Default)
  );
}

async function getThemePackage() {
  const dirs = await fs.readdir(THEMES_DIR, { withFileTypes: true });
  const selectedTheme = siteConfigJson.theme || 'default';
  const themeName = getThemePackageNameByThemeName(selectedTheme);
  let isFound = false;

  for (const dirent of dirs) {
    if (dirent.isDirectory()) {
      const themeDir = path.join(THEMES_DIR, dirent.name);
      const pkgJsonPath = path.join(themeDir, 'package.json');
      try {
        await fs.access(pkgJsonPath);
        const pkgJson = JSON.parse(await fs.readFile(pkgJsonPath, 'utf-8'));
        const isContainedTheme = importedPackages.includes(pkgJson.name);
        if (isContainedTheme && pkgJson.name === themeName) {
          isFound = true;
          break;
        }
      } catch {
        // Not a theme package, skip
      }
    }
  }
  if (!isFound) {
    throw new Error(
      `Theme package "${themeName}" not found in ${THEMES_DIR}. Please ensure it is installed and has a valid package.json.`,
    );
  }

  return themeName;
}

function generateImportSource(theme: string) {
  const fields = ['components', 'functions', 'templates'];
  const exports = fields
    .map(field => {
      const importPath = `${theme}/${field}`;
      return `export * as THEME_${field.toUpperCase()} from '${importPath}';`;
    })
    .join('\n');

  return `// AUTO-GENERATED FILE. DO NOT EDIT.
// Generated by scripts/generate-themes-config.ts

${exports}
`;
}

async function main() {
  const theme = await getThemePackage();
  if (!theme) {
    throw new Error('No theme package found in packages/themes/');
  }
  const configSource = generateImportSource(theme);
  await fs.mkdir(path.dirname(THEMES_IMPORT_FILE), { recursive: true });
  await fs.writeFile(THEMES_IMPORT_FILE, configSource, 'utf-8');
  console.log(
    `Generated themes config at ${path.relative(process.cwd(), THEMES_IMPORT_FILE)}`,
  );
}

if (require.main === module) {
  main().catch(err => {
    console.error(err);
    process.exit(1);
  });
}
